@model CommInfo.Models.MessageViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Message</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.MessageID)
        @Html.HiddenFor(model => model.ThreadID)  <!-- seen in recording (Feb 11) -->

        @*[DisplayFormat(DataFormatString = "{MMM dd, yyyy}")]*@
        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DisplayFor(model => model.Date)*@  <!-- Displays just the Date -->
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Optional 'To' fields -->
        @*<div class="form-group">
            @Html.LabelFor(model => model.To, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.To, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.To, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.From, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DisplayFor(model => model.From)*@ <!-- Displays just the Username -->
                @Html.DropDownList("FromList", String.Empty) <!-- String.Empty will make it read-only -->
                @*@Html.EditorFor(model => model.From, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.From, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Subject)
                @*@Html.EditorFor(model => model.Subject, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Original coding-->
        @*<div class="form-group">
            @Html.LabelFor(model => model.ThreadItem.Topic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ThreadItem.Topic, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ThreadItem.Topic, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <!-- Adjusting for topicName string. -->
        <div class="form-group">
            @Html.LabelFor(model => model.ThreadItem.Topic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.DisplayFor(model => model.ThreadItem.Topic)*@
                @Html.EditorFor(model => model.ThreadItem.Topic, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ThreadItem.Topic, "", new { @class = "text-danger" })
                @*@Html.DisplayTextFor(model => model.ThreadItem.Topic, new )*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Body, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Body, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Body, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
